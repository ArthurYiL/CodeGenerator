<#@ template language="C#" hostSpecific="true" debug="false" #>
<#@ output encoding="utf-8" extension=".thrift" #>
<#@ include file="../TemplateFileManager.ttinclude" #>
<#@ include file="../ThriftTypeConverter.ttinclude" #>
<# 
	CustomHost host = (CustomHost)(Host);
	Table table = host.Table;
    var manager = Manager.Create(host, GenerationEnvironment);
	manager.StartNewFile(table.DisplayName + "DTO.gen.cs", host.GetValue("OutputPath").ToString() + "\\Thrift\\gen-csharp\\Banana\\RPC");
#>
//------------------------------------------------------------------------------
// <copyright file="<#= table.DisplayName #>DTO.cs">
//    Copyright (c) <#= DateTime.Now.ToString("yyyy") #>, All rights reserved.
// </copyright>
// <author><#= Environment.UserName #></author>
// <date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #></date>
// <auto-generated>
//    This code was generated by Banana.AutoCode.exe
//    Template Version:20180827
//    Runtime Version:<#= Environment.Version.ToString() #>
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banana.RPC
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    using Banana.Entity;

    public partial class <#= table.DisplayName #>DTO
    {
        public static implicit operator <#= table.DisplayName #>Entity(<#= table.DisplayName #>DTO dto)
        {
            if (dto == null)
            {
                return default(<#= table.DisplayName #>Entity);
            }

            var ent = new <#= table.DisplayName #>Entity();
    <# 
		foreach(var column in table.Columns)
		{
	#>
        ent.<#= column.Name #> = dto.<#= column.Name #>;
	<#
		}
	#>

            return ent;
        }

        public static implicit operator <#= table.DisplayName #>DTO(<#= table.DisplayName #>Entity ent)
        {
            if(ent == null)
            {
                return default(<#= table.DisplayName #>DTO);
            }
            
            var dto = new <#= table.DisplayName #>DTO();
    <# 
		foreach(var column in table.Columns)
		{
	#>
        dto.<#= column.Name #> = ent.<#= column.Name #>;
	<#
		}
	#>

            return dto;
        }
    }
}
<# 
	manager.EndBlock(); 
    manager.StartNewFile(table.DisplayName + "RpcImpl.cs", host.GetValue("OutputPath").ToString() + "\\Thrift\\gen-csharp");
#>
//------------------------------------------------------------------------------
// <copyright file="<#= table.DisplayName #>RpcImpl.cs">
//    Copyright (c) <#= DateTime.Now.ToString("yyyy") #>, All rights reserved.
// </copyright>
// <author><#= Environment.UserName #></author>
// <date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #></date>
//------------------------------------------------------------------------------

namespace Banana.RPC.Hosting
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Banana.Entity;
    using Banana.RPC;
    using Banana.Services;

    public partial class <#= table.DisplayName #>RpcImpl : <#= table.DisplayName #>Rpc.Iface
    {
        <#= table.DisplayName #>Service service = new <#= table.DisplayName #>Service();

        public virtual Int64 GetNewId()
        {
            return service.GetNewId();
        }

        public virtual Boolean Exists(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            return service.Exists(<#= table.PrimaryKeyColumns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>);
        }

        public virtual <#= table.DisplayName #>DTO Get(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            return service.Get(<#= table.PrimaryKeyColumns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>);
        }

        public virtual Boolean Add(<#= table.DisplayName #>DTO dto)
        {
            if(dto == null)
            {
                throw new ArgumentNullException("dto");
            }

            return service.Add(dto);
        }

        public virtual Boolean AddMulti(List<<#= table.DisplayName #>DTO> dtoList)
        {
            if(dtoList == null)
            {
                throw new ArgumentNullException("dtoList");
            }

            var entList = new List<<#= table.DisplayName #>Entity>();

            foreach (var dto in dtoList)
            {
                entList.Add((<#= table.DisplayName #>Entity)dto);
            }

            return service.Add(entList);
        }

        public virtual Boolean Update(<#= table.DisplayName #>DTO dto)
        {
            if(dto == null)
            {
                throw new ArgumentNullException("dto");
            }

            return service.Update(dto);
        }

        public virtual Boolean UpdateMulti(List<<#= table.DisplayName #>DTO> dtoList)
        {
            if(dtoList == null)
            {
                throw new ArgumentNullException("dtoList");
            }

            var entList = new List<<#= table.DisplayName #>Entity>();

            foreach (var dto in dtoList)
            {
                entList.Add((<#= table.DisplayName #>Entity)dto);
            }

            return service.Update(entList);
        }

        public virtual Boolean Save(<#= table.DisplayName #>DTO dto)
        {
            if(dto == null)
            {
                throw new ArgumentNullException("dto");
            }

            return service.Save(dto);
        }

        public virtual Boolean SaveMulti(List<<#= table.DisplayName #>DTO> dtoList)
        {
            if(dtoList == null)
            {
                throw new ArgumentNullException("dtoList");
            }

            var entList = new List<<#= table.DisplayName #>Entity>();

            foreach (var dto in dtoList)
            {
                entList.Add((<#= table.DisplayName #>Entity)dto);
            }

            return service.Save(entList);
        }

        public virtual Boolean Delete(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            return service.Delete(<#= table.PrimaryKeyColumns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>);
        }

        public virtual Boolean DeleteMulti(List<<#= table.DisplayName #>DTO> dtoList)
        {
            if(dtoList == null)
            {
                throw new ArgumentNullException("dtoList");
            }

            var entList = new List<<#= table.DisplayName #>Entity>();

            foreach (var dto in dtoList)
            {
                entList.Add((<#= table.DisplayName #>Entity)dto);
            }

            return service.Delete(entList);
        }
    }
}
<# 
	manager.EndBlock(); 
    manager.StartNewFile("thrift.hosts." + table.DisplayName + ".config", host.GetValue("OutputPath").ToString() + "\\Thrift\\gen-csharp");
#>
<?xml version="1.0" encoding="utf-8" ?>
<thrift.hosts defaultHost="localhost">
    <host name="localhost" port="20188" minThreadPoolSize="10" maxThreadPoolSize="100" clientTimeout="0" useBufferedSockets="false">
        <service contract="Banana.RPC.<#= table.DisplayName #>Rpc,Banana.RPC" handler="Banana.RPC.Hosting.<#= table.DisplayName #>RpcImpl,Banana.RPC.Hosting" />
    </host>
</thrift.hosts>
<#
	manager.EndBlock(); 
    manager.StartNewFile("thrift.clients." + table.DisplayName + ".config", host.GetValue("OutputPath").ToString() + "\\Thrift\\gen-csharp");
#>
<?xml version="1.0" encoding="utf-8" ?>
<thrift.clients host="localhost" port="20188">
    <client service="Banana.RPC.<#= table.DisplayName #>Rpc" />
</thrift.clients>
<#
	manager.EndBlock();
	manager.Process(true);
#>