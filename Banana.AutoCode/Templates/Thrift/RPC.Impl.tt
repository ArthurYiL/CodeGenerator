<#@ template language="C#" hostSpecific="true" debug="false" #>
<#@ output encoding="utf-8" extension=".thrift" #>
<#@ include file="../TemplateFileManager.ttinclude" #>
<#@ include file="../ThriftTypeConverter.ttinclude" #>
<# 
	CustomHost host = (CustomHost)(Host);
	Table table = host.Table;
    var manager = Manager.Create(host, GenerationEnvironment);
	manager.StartNewFile(table.DisplayName + "DTO.cs", host.GetValue("OutputPath").ToString() + "\\Thrift\\gen-csharp");
    //TODO:Impl
#>
//------------------------------------------------------------------------------
// <copyright file="<#= table.DisplayName #>DTO.cs">
//    Copyright (c) <#= DateTime.Now.ToString("yyyy") #>, All rights reserved.
// </copyright>
// <author><#= Environment.UserName #></author>
// <date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #></date>
// <auto-generated>
//    This code was generated by Banana.AutoCode.exe
//    Template Version:20180824
//    Runtime Version:<#= Environment.Version.ToString() #>
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banana.RPC
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    using Banana.Entity;

    public partial class <#= table.DisplayName #>DTO
    {
        public static implicit operator <#= table.DisplayName #>Entity(<#= table.DisplayName #>DTO dto)
        {
            if (dto == null)
            {
                return default(<#= table.DisplayName #>Entity);
            }

            var ent = new <#= table.DisplayName #>Entity();
    <# 
		foreach(var column in table.Columns)
		{
	#>
        ent.<#= column.Name #> = dto.<#= column.Name #>;
	<#
		}
	#>

            return ent;
        }

        public static implicit operator <#= table.DisplayName #>DTO(<#= table.DisplayName #>Entity ent)
        {
            if(ent == null)
            {
                return default(<#= table.DisplayName #>DTO);
            }
            
            var dto = new <#= table.DisplayName #>DTO();
    <# 
		foreach(var column in table.Columns)
		{
	#>
        dto.<#= column.Name #> = ent.<#= column.Name #>;
	<#
		}
	#>

            return dto;
        }
    }
}

<# 
	manager.EndBlock(); 
	manager.Process(true);
#>