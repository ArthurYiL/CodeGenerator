//------------------------------------------------------------------------------
// <copyright file="DataProvider.tt">
//    Copyright (c) 2018, https://github.com/yuanrui All rights reserved.
// </copyright>
// <author>Yuan Rui</author>
// <date>2018-04-25 18:00:00</date>
//------------------------------------------------------------------------------
<#@ template language="C#" hostSpecific="true" debug="false" #>
<#@ output encoding="utf-8" extension=".cs" #>
<#@ include file="../TemplateFileManager.ttinclude" #>
<# 
	CustomHost host = (CustomHost)(Host);
	Table table = host.Table;
    var seqName = "SEQ_" + (table.Name.StartsWith("T_", StringComparison.OrdinalIgnoreCase) ? table.Name.Remove(0, 2) : table.Name);
    var manager = Manager.Create(host, GenerationEnvironment);
	manager.StartNewFile(table.DisplayName + "SqlProviderBase.generated.cs", host.GetValue("OutputPath").ToString());
#>
//------------------------------------------------------------------------------
// <copyright file="<#= table.DisplayName #>SqlProviderBase.generated.cs">
//    Copyright (c) <#= DateTime.Now.ToString("yyyy") #>, All rights reserved.
// </copyright>
// <date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #></date>
// <auto-generated>
//    This code was generated by Banana.AutoCode.exe
//    Template Version:20180425
//    Runtime Version:<#= Environment.Version.ToString() #>
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banana.DataAccess.Base
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Text;
    using Banana.Entity;
    using Oracle.ManagedDataAccess.Client;
    using Oracle.ManagedDataAccess.Types;

    /// <summary>
	/// <#= string.Format("Data access base class for {0}Entity", table.DisplayName) #>
    /// </summary>
	public partial class <#= table.DisplayName #>SqlProviderBase
    {
        #region SQL

        protected const string SEQ_<#= table.DisplayName #>_Sql = @"
CREATE SEQUENCE <#= seqName #>
INCREMENT BY 1
START WITH 1
MAXVALUE 9223372036854775807
NOCYCLE";
        
        protected const string Exists_<#= table.DisplayName #>_Sql = @"SELECT COUNT(1) AS RecordCount FROM <#= table.Name #> 
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=:{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        protected const string GetSingle_<#= table.DisplayName #>_Sql = @"SELECT * FROM <#= table.Name #> 
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=:{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        protected const string FindList_<#= table.DisplayName #>_Sql = @"SELECT * FROM <#= table.Name #> WHERE 1=1 ";
        
        protected const string Insert_<#= table.DisplayName #>_With_SEQ_Sql = @"
BEGIN
SELECT <#= seqName #>.NEXTVAL INTO :<#= table.PrimaryKeyColumns.First().Name #> FROM DUAL;
INSERT INTO <#= table.Name #>
(<#= table.Columns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>)
VALUES
(<#= table.Columns.Select(m => ":" + m.Name).Aggregate((a, b) => a + ", " + b) #>);
END;";

        protected const string Insert_<#= table.DisplayName #>_Sql = @"
INSERT INTO <#= table.Name #>
(<#= table.Columns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>)
VALUES
(<#= table.Columns.Select(m => ":" + m.Name).Aggregate((a, b) => a + ", " + b) #>)";

        protected const string Update_<#= table.DisplayName #>_Sql = @"
UPDATE <#= table.Name #>
SET <#= table.Columns.Select(m => String.Format("{0}=:{0}", m.Name)).Aggregate((a, b) => a + ", " + b) #>
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=:{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        protected const string Save_<#= table.DisplayName #>_Sql = @"
MERGE INTO <#= table.Name #> A
USING (SELECT <#= table.Columns.Select(m => String.Format(":{0} AS {0}", m.Name)).Aggregate((a, b) => a + ", " + b) #> FROM DUAL) B
ON (<#= table.PrimaryKeyColumns.Select(m => String.Format("A.{0}=B.{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>)
WHEN MATCHED THEN
    UPDATE SET <#= table.NonPrimaryKeyColumns.Select(m => String.Format("A.{0}=B.{0}", m.Name)).Aggregate((a, b) => a + ", " + b) #>
WHEN NOT MATCHED THEN
    INSERT (<#= table.Columns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>)
VALUES
(<#= table.Columns.Select(m => ":" + m.Name).Aggregate((a, b) => a + ", " + b) #>)";
    
        protected const string Delete_<#= table.DisplayName #>_Sql = @"
DELETE FROM <#= table.Name #>
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=:{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        #endregion

        #region Constructor

        #endregion

        #region CRUD

        #endregion

        #region Fill Data

        #endregion
	}
}
<# 
	manager.EndBlock(); 
	manager.Process(true);
#>