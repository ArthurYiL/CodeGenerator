<#
//------------------------------------------------------------------------------
// <copyright file="DataProvider.tt">
//    Copyright (c) 2018, https://github.com/yuanrui All rights reserved.
// </copyright>
// <author>Yuan Rui</author>
// <date>2018-04-25 18:00:00</date>
//------------------------------------------------------------------------------
#>
<#@ template language="C#" hostSpecific="true" debug="false" #>
<#@ output encoding="utf-8" extension=".cs" #>
<#@ include file="../TemplateFileManager.ttinclude" #>
<#@ include file="../OracleTypeConverter.ttinclude" #>
<# 
	CustomHost host = (CustomHost)(Host);
	Table table = host.Table;
    var seqName = "SEQ_" + (table.Name.StartsWith("T_", StringComparison.OrdinalIgnoreCase) ? table.Name.Remove(0, 2) : table.Name);
    var entClassName = table.DisplayName + "Entity";
    var pkCol = table.PrimaryKeyColumns.First();
    var pkTypeName = pkCol.TypeName;
    var index = 0;
    var manager = Manager.Create(host, GenerationEnvironment);
	manager.StartNewFile(table.DisplayName + "SqlProviderBase.generated.cs", host.GetValue("OutputPath").ToString() + "\\Providers\\Oracle");
#>
//------------------------------------------------------------------------------
// <copyright file="<#= table.DisplayName #>SqlProviderBase.generated.cs">
//    Copyright (c) <#= DateTime.Now.ToString("yyyy") #>, All rights reserved.
// </copyright>
// <author><#= Environment.UserName #></author>
// <date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #></date>
// <auto-generated>
//    This code was generated by AutoCode.exe
//    Template Version:20190131
//    Runtime Version:<#= Environment.Version.ToString() #>
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banana.DataAccess.Base
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Common;
    using System.Linq;
    using System.Text;
    using Banana.Entity;
    using Oracle.ManagedDataAccess.Client;
    using Oracle.ManagedDataAccess.Types;

    /// <summary>
	/// <#= String.Format("Data access base class for {0}Entity", table.DisplayName) #>
    /// </summary>
	public abstract partial class <#= table.DisplayName #>SqlProviderBase : DataProviderBase<<#= entClassName #>>
    {
        #region SQL

        public virtual String TableName
        { 
            get 
            {
                return "<#= table.Name #>";
            }
        }

        protected const String SEQ_<#= table.DisplayName #>_Sql = @"
CREATE SEQUENCE <#= seqName #>
INCREMENT BY 1
START WITH 1
MAXVALUE 9223372036854775807
NOCYCLE";
        
        protected const String Exists_<#= table.DisplayName #>_Sql = @"SELECT COUNT(1) AS RecordCount FROM <#= table.Name #> 
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=:{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        protected const String Get_<#= table.DisplayName #>_Sql = @"SELECT * FROM <#= table.Name #> 
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=:{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        protected const String Find_<#= table.DisplayName #>_Sql = @"SELECT * FROM <#= table.Name #> WHERE 1=1 ";
        
        protected const String Insert_<#= table.DisplayName #>_With_SEQ_Sql = @"
BEGIN
SELECT <#= seqName #>.NEXTVAL INTO :<#= table.PrimaryKeyColumns.First().Name #> FROM DUAL;
INSERT INTO <#= table.Name #>
(<#= table.Columns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>)
VALUES
(<#= table.Columns.Select(m => ":" + m.Name).Aggregate((a, b) => a + ", " + b) #>);
END;";

        protected const String Insert_<#= table.DisplayName #>_Sql = @"
INSERT INTO <#= table.Name #>
(<#= table.Columns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>)
VALUES
(<#= table.Columns.Select(m => ":" + m.Name).Aggregate((a, b) => a + ", " + b) #>)";

        protected const String Update_<#= table.DisplayName #>_Sql = @"
UPDATE <#= table.Name #>
SET <#= table.Columns.Select(m => String.Format("{0}=:{0}", m.Name)).Aggregate((a, b) => a + ", " + b) #>
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=:{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        protected const String Save_<#= table.DisplayName #>_Sql = @"
MERGE INTO <#= table.Name #> A
USING (SELECT <#= table.Columns.Select(m => String.Format(":{0} AS {0}", m.Name)).Aggregate((a, b) => a + ", " + b) #> FROM DUAL) B
ON (<#= table.PrimaryKeyColumns.Select(m => String.Format("A.{0}=B.{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>)
WHEN MATCHED THEN
    UPDATE SET <#= table.NonPrimaryKeyColumns.Select(m => String.Format("A.{0}=B.{0}", m.Name)).Aggregate((a, b) => a + ", " + b) #>
WHEN NOT MATCHED THEN
    INSERT (<#= table.Columns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>)
VALUES
(<#= table.Columns.Select(m => ":" + m.Name).Aggregate((a, b) => a + ", " + b) #>)";
    
        protected const String Delete_<#= table.DisplayName #>_Sql = @"
DELETE FROM <#= table.Name #>
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=:{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        #endregion

        #region Constructor

        public <#= table.DisplayName #>SqlProviderBase() : base()
        {
        }

        public <#= table.DisplayName #>SqlProviderBase(String connectionName) : base(connectionName)
        {
        }

        #endregion

        #region CRUD

        public virtual Boolean Exists(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            var cmd = DatabaseObject.GetSqlStringCommand(Exists_<#= table.DisplayName #>_Sql);
<#
            foreach(var col in table.PrimaryKeyColumns)
            {
#>
            cmd.Parameters.Add(new OracleParameter("<#= col.Name #>", OracleDbType.<#= OracleTypeConverter.AsOracleDbType(col.RawType).ToString() #>, <#= col.Name #>, ParameterDirection.Input));
<#
            }
#>
            var result = DataContextObject.ExecuteScalar(cmd);
            
            return Convert.ToInt32(result) > 0;
        }

        public virtual <#= entClassName #> Get(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            <#= entClassName #> result = null;
            var cmd = DatabaseObject.GetSqlStringCommand(Get_<#= table.DisplayName #>_Sql);

<#
            foreach(var col in table.PrimaryKeyColumns)
            {
#>
            cmd.Parameters.Add(new OracleParameter("<#= col.Name #>", OracleDbType.<#= OracleTypeConverter.AsOracleDbType(col.RawType).ToString() #>, <#= col.Name #>, ParameterDirection.Input));
<#
            }
#>
            using(var reader = DataContextObject.ExecuteReader(cmd))
            {
                if(reader.Read())
                {
                    result = Fill(reader);
                }
            }
            
            return result;
        }

        public virtual List<<#= entClassName #>> FindAll(String whereClause)
        {
            var result = new List<<#= entClassName #>>();
            var sql = Find_<#= table.DisplayName #>_Sql + whereClause;
            var cmd = DatabaseObject.GetSqlStringCommand(sql);

            using(var reader = DataContextObject.ExecuteReader(cmd))
            {
                while(reader.Read())
                {
                    var ent = Fill(reader);
                    result.Add(ent);
                }
            }

            return result;
        }

        public virtual Boolean Add(<#= entClassName #> entity)
        {
<#
            if(table.PrimaryKeyIsNumber)
            {
#>
            var isAutoGetNewId = entity.<#= pkCol.Name #> == default(<#= pkTypeName #>);
            var cmd = DatabaseObject.GetSqlStringCommand(isAutoGetNewId ? Insert_<#= table.DisplayName #>_With_SEQ_Sql : Insert_<#= table.DisplayName #>_Sql);
            
            var pkParam = new OracleParameter("<#= pkCol.Name #>", OracleDbType.<#= OracleTypeConverter.AsOracleDbType(pkCol.RawType).ToString() #>, entity.<#= pkCol.Name #>, ParameterDirection.InputOutput);
            cmd.Parameters.Add(pkParam);
            var nonKeyParams = BuildParametersForNonKey(entity);
            cmd.Parameters.AddRange(nonKeyParams);

            var execResult = DataContextObject.ExecuteNonQuery(cmd);
            if(isAutoGetNewId && pkParam.Value is OracleDecimal)
            {
                var pkValue = (OracleDecimal) pkParam.Value;
                entity.<#= pkCol.Name #> = pkValue.<#= pkTypeName == "Decimal" ? "Value" : "To" + pkTypeName + "()" #>;
                return entity.<#= pkCol.Name #> > 0;
            }

            return execResult > 0;
<#
            }
            else
            {
#>
            var @parameters = BuildParameters(entity);

            return Add(@parameters) > 0;
<#
            }
#>
        }

        public virtual Int32 Add(DbParameter[] @parameters)
        {
            var cmd = DatabaseObject.GetSqlStringCommand(Insert_<#= table.DisplayName #>_Sql) as OracleCommand;
            cmd.Parameters.AddRange(@parameters);

            return DataContextObject.ExecuteNonQuery(cmd);
        }

        public virtual Int32 Add(DbParameter[] @parameters, Int32 arrayBindCount)
        {
            var cmd = DatabaseObject.GetSqlStringCommand(Insert_<#= table.DisplayName #>_Sql) as OracleCommand;
            cmd.Parameters.AddRange(@parameters);
            cmd.ArrayBindCount = arrayBindCount;

            return DataContextObject.ExecuteNonQuery(cmd);
        }

        public virtual Boolean Update(<#= entClassName #> entity)
        {            
            var @parameters = BuildParameters(entity);

            return Update(@parameters) > 0;
        }
        
        public virtual Int32 Update(DbParameter[] @parameters)
        {
            var cmd = DatabaseObject.GetSqlStringCommand(Update_<#= table.DisplayName #>_Sql) as OracleCommand;
            cmd.Parameters.AddRange(@parameters);

            return DataContextObject.ExecuteNonQuery(cmd);
        }

        public virtual Int32 Update(DbParameter[] @parameters, Int32 arrayBindCount)
        {
            var cmd = DatabaseObject.GetSqlStringCommand(Update_<#= table.DisplayName #>_Sql) as OracleCommand;
            cmd.Parameters.AddRange(@parameters);
            cmd.ArrayBindCount = arrayBindCount;

            return DataContextObject.ExecuteNonQuery(cmd);
        }

        public virtual Boolean Save(<#= entClassName #> entity)
        {
<#
            if(table.PrimaryKeyIsNumber)
            {
#>
            if(entity.<#= pkCol.Name #> == default(<#= pkCol.TypeName #>))
            {
                return Add(entity);
            }
<#            
            }
#>            
            var @parameters = BuildParameters(entity);
            
            return Save(@parameters) > 0;
        }
        
        public virtual Int32 Save(DbParameter[] @parameters)
        {
            var cmd = DatabaseObject.GetSqlStringCommand(Save_<#= table.DisplayName #>_Sql) as OracleCommand;
            cmd.Parameters.AddRange(@parameters);

            return DataContextObject.ExecuteNonQuery(cmd);
        }

        public virtual Int32 Save(DbParameter[] @parameters, Int32 arrayBindCount)
        {
            var cmd = DatabaseObject.GetSqlStringCommand(Save_<#= table.DisplayName #>_Sql) as OracleCommand;
            cmd.Parameters.AddRange(@parameters);
            cmd.ArrayBindCount = arrayBindCount;

            return DataContextObject.ExecuteNonQuery(cmd);
        }

        public virtual Boolean Delete(<#= entClassName #> entity)
        {
            var @parameters = BuildParametersForKey(entity);

            return Delete(@parameters) > 0;
        }

        public virtual Boolean Delete(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            var cmd = DatabaseObject.GetSqlStringCommand(Delete_<#= table.DisplayName #>_Sql);

<#
            foreach(var col in table.PrimaryKeyColumns)
            {
#>
            cmd.Parameters.Add(new OracleParameter("<#= col.Name #>", OracleDbType.<#= OracleTypeConverter.AsOracleDbType(col.RawType).ToString() #>, <#= col.Name #>, ParameterDirection.Input));
<#
            }
#>

            return DataContextObject.ExecuteNonQuery(cmd) > 0;
        }
        
        public virtual Int32 Delete(DbParameter[] @parameters)
        {
            var cmd = DatabaseObject.GetSqlStringCommand(Delete_<#= table.DisplayName #>_Sql) as OracleCommand;
            cmd.Parameters.AddRange(@parameters);

            return DataContextObject.ExecuteNonQuery(cmd);
        }
               
        public virtual Int32 Delete(DbParameter[] @parameters, Int32 arrayBindCount)
        {
            var cmd = DatabaseObject.GetSqlStringCommand(Delete_<#= table.DisplayName #>_Sql) as OracleCommand;
            cmd.Parameters.AddRange(@parameters);
            cmd.ArrayBindCount = arrayBindCount;

            return DataContextObject.ExecuteNonQuery(cmd);
        }

        #region Build Parameters

        public virtual DbParameter[] BuildParameters(<#= entClassName #> entity)
        {
            var @paramList = new OracleParameter[<#= table.Columns.Count #>];
<#
            for (int i = 0; i < table.Columns.Count; i++)
            {
                var col = table.Columns[i];
                var paraDirection = col.IsPrimaryKey ? "ParameterDirection.InputOutput" : "ParameterDirection.Input";
#>
            @paramList[<#= i #>] = new OracleParameter("<#= col.Name #>", OracleDbType.<#= OracleTypeConverter.AsOracleDbType(col.RawType).ToString() #>, entity.<#= col.Name #>, <#= paraDirection #>);
<#
            }
#>
            return @paramList;
        }
        
        public virtual DbParameter[] BuildParameters(IEnumerable<<#= entClassName #>> list)
        {
            var @paramList = new OracleParameter[<#= table.Columns.Count #>];
<#
            index = 0;
            foreach(var col in table.Columns)
            {
                var paraDirection = col.IsPrimaryKey ? "ParameterDirection.InputOutput" : "ParameterDirection.Input";
#>
            @paramList[<#= index++ #>] = new OracleParameter("<#= col.Name #>", OracleDbType.<#= OracleTypeConverter.AsOracleDbType(col.RawType).ToString() #>, list.Select(c => c.<#= col.Name #>).ToArray(), <#= paraDirection #>);
<#
            }
#>
            return @paramList;
        }

        public virtual DbParameter[] BuildParametersForKey(<#= entClassName #> entity)
        {
            var @paramList = new OracleParameter[<#= table.PrimaryKeyColumns.Count #>];
<#
            index = 0;
            foreach(var col in table.PrimaryKeyColumns)
            {                
#>
            @paramList[<#= index++ #>] = new OracleParameter("<#= col.Name #>", OracleDbType.<#= OracleTypeConverter.AsOracleDbType(col.RawType).ToString() #>, entity.<#= col.Name #>, ParameterDirection.InputOutput);
<#
            }
#>
            return @paramList;
        }

        public virtual DbParameter[] BuildParametersForKey(IEnumerable<<#= entClassName #>> list)
        {
            var @paramList = new OracleParameter[<#= table.PrimaryKeyColumns.Count #>];
<#
            index = 0;
            foreach(var col in table.PrimaryKeyColumns)
            {
#>
            @paramList[<#= index++ #>] = new OracleParameter("<#= col.Name #>", OracleDbType.<#= OracleTypeConverter.AsOracleDbType(col.RawType).ToString() #>, list.Select(c => c.<#= col.Name #>).ToArray(), ParameterDirection.InputOutput);
<#
            }
#>
            return @paramList;
        }

        public virtual DbParameter[] BuildParametersForNonKey(<#= entClassName #> entity)
        {
            var @paramList = new OracleParameter[<#= table.NonPrimaryKeyColumns.Count #>];
<#
            index = 0;
            foreach(var col in table.NonPrimaryKeyColumns)
            {
#>
            @paramList[<#= index++ #>] = new OracleParameter("<#= col.Name #>", OracleDbType.<#= OracleTypeConverter.AsOracleDbType(col.RawType).ToString() #>, entity.<#= col.Name #>, ParameterDirection.Input);
<#
            }
#>
            return @paramList;
        }

        public virtual DbParameter[] BuildParametersForNonKey(IEnumerable<<#= entClassName #>> list)
        {
            var @paramList = new OracleParameter[<#= table.NonPrimaryKeyColumns.Count #>];
<#
            index = 0;
            foreach(var col in table.NonPrimaryKeyColumns)
            {
#>
            @paramList[<#= index++ #>] = new OracleParameter("<#= col.Name #>", OracleDbType.<#= OracleTypeConverter.AsOracleDbType(col.RawType).ToString() #>, list.Select(c => c.<#= col.Name #>).ToArray(), ParameterDirection.Input);
<#
            }
#>
            return @paramList;
        }
        

        #endregion

        #endregion

        #region Fill Data

        public static <#= entClassName #> Fill(IDataReader reader)
        {
            var ent = new <#= entClassName #>();

<#
            for(var i = 0; i < table.Columns.Count; i ++)
            {
                var col = table.Columns[i];
#>
            <#= OracleTypeConverter.GetFillNameExpression(col, "ent", i, "reader", String.Empty) #>
<#
            }
#>

            return ent;
        }
        
        public static <#= entClassName #> Fill(IDataReader reader, Int32 start,out Int32 length)
        {
            var ent = new <#= entClassName #>();

            length = <#= table.Columns.Count #>;
<#
            for(var i = 0; i < table.Columns.Count; i ++)
            {
                var col = table.Columns[i];
#>
            <#= OracleTypeConverter.GetFillIndexExpression(col, "ent", i, "reader", "start + ") #>
<#
            }
#>

            return ent;
        }

        #endregion
	}
}
<# 
	manager.EndBlock(); 

    manager.StartNewFile(table.DisplayName + "SqlProvider.cs", host.GetValue("OutputPath").ToString()+ "\\Providers");
#>
//------------------------------------------------------------------------------
// <copyright file="<#= table.DisplayName #>SqlProvider.cs">
//    Copyright (c) <#= DateTime.Now.ToString("yyyy") #>, All rights reserved.
// </copyright>
// <author><#= Environment.UserName #></author>
// <date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #></date>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using Banana.DataAccess.Base;
using Banana.Entity;
using Oracle.ManagedDataAccess.Client;

namespace Banana.DataAccess
{
    /// <summary>
    /// Data access for <#= entClassName #>
    /// <see cref="<#= entClassName #>"/>
    /// </summary>
    public partial class <#= table.DisplayName #>SqlProvider : <#= table.DisplayName #>SqlProviderBase
    {
        #region Constructor

        public <#= table.DisplayName #>SqlProvider() : base()
        {
        }

        public <#= table.DisplayName #>SqlProvider(String connectionName) : base(connectionName)
        {
        }

        #endregion
    }
}
<#
    manager.EndBlock(); 
	manager.Process(true);
#>