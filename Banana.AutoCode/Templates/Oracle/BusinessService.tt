<#
//------------------------------------------------------------------------------
// <copyright file="BusinessService.tt">
//    Copyright (c) 2018, https://github.com/yuanrui All rights reserved.
// </copyright>
// <author>Yuan Rui</author>
// <date>2018-05-23 18:00:00</date>
//------------------------------------------------------------------------------
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output encoding="utf-8" extension=".txt" #>
<#@ include file="../TemplateFileManager.ttinclude" #>
<#@ include file="../OracleTypeConverter.ttinclude" #>
<# 
	CustomHost host = (CustomHost)(Host);
	Table table = host.Table;
    var seqName = "SEQ_" + (table.Name.StartsWith("T_", StringComparison.OrdinalIgnoreCase) ? table.Name.Remove(0, 2) : table.Name);
    var entClassName = table.DisplayName + "Entity";
    var pkCol = table.PrimaryKeyColumns.First();
    var pkTypeName = pkCol.TypeName;
    var manager = Manager.Create(host, GenerationEnvironment);
	manager.StartNewFile(table.DisplayName + "ServiceBase.generated.cs", host.GetValue("OutputPath").ToString() + "\\Services");
#>
//------------------------------------------------------------------------------
// <copyright file="<#= table.DisplayName #>ServiceBase.generated.cs">
//    Copyright (c) <#= DateTime.Now.ToString("yyyy") #>, All rights reserved.
// </copyright>
// <author><#= Environment.UserName #></author>
// <date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #></date>
// <auto-generated>
//    This code was generated by Banana.AutoCode.exe
//    Template Version:20180523
//    Runtime Version:<#= Environment.Version.ToString() #>
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banana.Services.Base
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Text;
    using Banana.DataAccess;
    using Banana.Entity;

    public abstract partial class <#= table.DisplayName #>ServiceBase : ServiceBase<<#= entClassName #>>
    {
        private readonly String _connectionName;

        protected readonly <#= table.DisplayName #>SqlProvider Provider;

        public <#= table.DisplayName #>ServiceBase(String connectionName)
        {
            _connectionName = connectionName;
            Provider = new <#= table.DisplayName #>SqlProvider(connectionName);
        }

        public virtual Boolean Exists(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            using(var scope = DataContextScope.GetCurrent(ConnectionName).Begin())
            {
                var result = Provider.Exists(<#= table.PrimaryKeyColumns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>);
            
                return result;
            }
        }
        
        public virtual <#= entClassName #> Get(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            using(var scope = DataContextScope.GetCurrent(ConnectionName).Begin())
            {
                var result = Provider.Get(<#= table.PrimaryKeyColumns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>);
            
                return result;
            }
        }
        
        public virtual Pager<<#= entClassName #>> GetPager(Int32 pageIndex, Int32 pageSize)
        {
            using (var scope = DataContextScope.GetCurrent(ConnectionName).Begin())
            {
                var result = Provider.GetPager(<#= table.DisplayName #>SqlProvider.Fill, pageIndex, pageSize, Provider.TableName, "<#= table.PrimaryKeyColumns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>", "<#= table.PrimaryKeyColumns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>", "*", String.Empty);
                return result;
            }
        }
        
        public virtual Boolean Add(<#= entClassName #> entity)
        {
            using(var scope = DataContextScope.GetCurrent(ConnectionName).Begin(true))
            {
                var result = Provider.Add(entity);
                scope.Commit();                
                
                return result;
            }
        }

        public virtual Boolean Update(<#= entClassName #> entity)
        {
            using(var scope = DataContextScope.GetCurrent(ConnectionName).Begin(true))
            {
                var result = Provider.Update(entity);
                scope.Commit();
                
                return result;
            }
        }
        
        public virtual Boolean Save(<#= entClassName #> entity)
        {
            using(var scope = DataContextScope.GetCurrent(ConnectionName).Begin(true))
            {
                var result = Provider.Save(entity);
                scope.Commit();
                
                return result;
            }
        }
        
        public virtual Boolean Delete(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            using(var scope = DataContextScope.GetCurrent(ConnectionName).Begin(true))
            {
                var result = Provider.Delete(<#= table.PrimaryKeyColumns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>);
                scope.Commit();
            
                return result;
            }
        }
    }
}
<# 
	manager.EndBlock(); 
    manager.StartNewFile(table.DisplayName + "Service.cs", host.GetValue("OutputPath").ToString() + "\\Services");
#>
//------------------------------------------------------------------------------
// <copyright file="<#= table.DisplayName #>Service.cs">
//    Copyright (c) <#= DateTime.Now.ToString("yyyy") #>, All rights reserved.
// </copyright>
// <author><#= Environment.UserName #></author>
// <date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #></date>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using Banana.DataAccess;
using Banana.Entity;
using Banana.Services.Base;

namespace Banana.Services
{
    /// <summary>
    /// Service for <#= entClassName #>
    /// <see cref="<#= entClassName #>"/>
    /// </summary>
    public partial class <#= table.DisplayName #>Service : <#= table.DisplayName #>ServiceBase
    {
        public const string connname = "DefaultConnectionString";

        #region Constructor

        public <#= table.DisplayName #>Service() : this(connname)
        {
        }

        public <#= table.DisplayName #>Service(String connectionName) : base(connectionName)
        {
        }

        #endregion

        public virtual List<<#= entClassName #>> FindAll()
        {
            using (var scope = DataContextScope.GetCurrent(ConnectionName).Begin())
            {
                return Provider.FindAll(string.Empty);
            }
        }
    }
}
<# 
	manager.EndBlock(); 
    manager.Process(true);
#>